#!/usr/bin/env ruby

ENV['BUNDLE_GEMFILE'] = File.expand_path('../../Gemfile', __FILE__)

require 'bundler/setup'
require 'github_archive'
require 'pathname'
require 'thor'

# CLI tool for archiving github
class Archive < Thor
  # exit(1) of failure
  def self.exit_on_faiure?
    true
  end

  class_option :filename,
               default: 'github-archive.tar',
               desc: 'output filename',
               aliases: ['-f']

  class_option :token,
               desc: 'github token for authentication',
               aliases: ['-t']

  class_option :verbose,
               type: :boolean,
               default: false,
               desc: 'Use verbose output',
               aliases: ['-v']

  Signal.trap('INT') do
    puts "\nInterrupted.\n"
    exit 1
  end unless binding.respond_to? :pry

  desc 'org-repos ORGANIZATION', "Archive an organization's repos"
  def org_repos(organization)
    puts "Backing up repositories for #{organization}..."
    gh = GithubArchive::User::Repos.new(
      GithubArchive::Auth.new(options[:token]).client,
      check_file(options[:filename]),
      options[:verbose]
    )
    gh.archive(organization)
    puts "Total repos backed up: #{gh.backup_count}"
    puts "Total size: #{gh.total_size}"
  end

  desc 'user-repos USER', "Archive a user's repos"
  def user_repos(user)
    puts "Backing up repositories for #{user}..."
    gh = GithubArchive::User::Repos.new(
      GithubArchive::Auth.new(options[:token]).client,
      check_file(options[:filename]),
      options[:verbose]
    )
    gh.archive(user)
    puts "Total repos backed up: #{gh.backup_count}"
    puts "Total size: #{gh.total_size}"
  end

  no_tasks do
    def check_file(outfile)
      file = Pathname.new(outfile)
      if file.exist?
        puts "\nERROR: #{file.realpath} exists"
        exit 1
      end
      outfile
    end
  end
end

Archive.start(ARGV)
